Syntactically, FORTRAN is very different from other languages I've worked with - it feels closer to Python than anything else. Some syntax, such as the 'write' statement, is unintuitive - what does the "(*,*)" part of the statement mean?

From the limited experience I had, orthogonality does seem to be followed - there is a small number of operators that can be used to perform most operations. However, operators having multiple meaning based on the context was much rarer than what I'm used to. For example: While '=' is used to assign a value to a variable, performing a comparison between variables uses .EQ. instead of '==' as most other languages.

The biggest difference are the required 7 columns of free space at the start of each line, which I really don't like. For a language so focused on efficiency, it seems like such a huge waste of space to have these lines always dedicated to a certain purpose, and simply left empty if not needed. I think this mainly affects writeability over readability - reading these lines is mostly fine, though I think identifying which column a character is in could get annoying. Howevr, ensuring the first 7 lines are always used and modifying them later was already frustrating in the small program we needed to write. This is probably at least in part as modern text editors weren't designed for this kind of syntactic structure.

Even though there were quite a few differences, all the fundamentals were still the same - I could still intuitively figure out most syntax and logical structure (like if statements starting with 'if' and ending with 'endif', and do-loops working similar to for-loops). There's a world of difference between the challenge of learning basic FORTRAN compared to writing something like assembly.